// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	user "warehouse/features/user"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the DataInterface type
type UserData struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: data
func (_m *UserData) AddUser(data user.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(user.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientData provides a mock function with given fields: id
func (_m *UserData) DeleteClientData(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteData provides a mock function with given fields: id
func (_m *UserData) DeleteData(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectClient provides a mock function with given fields: id
func (_m *UserData) SelectClient(id int) (user.Core, error) {
	ret := _m.Called(id)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(int) user.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMitra provides a mock function with given fields: id
func (_m *UserData) SelectMitra(id int) (user.Core, error) {
	ret := _m.Called(id)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(int) user.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMitraByAdmin provides a mock function with given fields: id
func (_m *UserData) SelectMitraByAdmin(id int) (user.Core, error) {
	ret := _m.Called(id)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(int) user.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMitraUnverif provides a mock function with given fields:
func (_m *UserData) SelectMitraUnverif() ([]user.Core, error) {
	ret := _m.Called()

	var r0 []user.Core
	if rf, ok := ret.Get(0).(func() []user.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMitraVerified provides a mock function with given fields:
func (_m *UserData) SelectMitraVerified() ([]user.Core, error) {
	ret := _m.Called()

	var r0 []user.Core
	if rf, ok := ret.Get(0).(func() []user.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClient provides a mock function with given fields: id, data
func (_m *UserData) UpdateClient(id int, data user.Core) (int, error) {
	ret := _m.Called(id, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, user.Core) int); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, user.Core) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMitra provides a mock function with given fields: id, data
func (_m *UserData) UpdateMitra(id int, data user.Core) (int, error) {
	ret := _m.Called(id, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, user.Core) int); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, user.Core) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVerify provides a mock function with given fields: id, status
func (_m *UserData) UpdateVerify(id int, status user.Core) (int, error) {
	ret := _m.Called(id, status)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, user.Core) int); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, user.Core) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
