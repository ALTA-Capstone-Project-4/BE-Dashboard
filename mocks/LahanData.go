// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	lahan "warehouse/features/lahan"

	mock "github.com/stretchr/testify/mock"
)

// LahanData is an autogenerated mock type for the DataInterface type
type LahanData struct {
	mock.Mock
}

// CreateLahan provides a mock function with given fields: data, user_id
func (_m *LahanData) CreateLahan(data lahan.Core, user_id int) (int, error) {
	ret := _m.Called(data, user_id)

	var r0 int
	if rf, ok := ret.Get(0).(func(lahan.Core, int) int); ok {
		r0 = rf(data, user_id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(lahan.Core, int) error); ok {
		r1 = rf(data, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteData provides a mock function with given fields: id, token, data
func (_m *LahanData) DeleteData(id int, token int, data lahan.Core) (int, error) {
	ret := _m.Called(id, token, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, lahan.Core) int); ok {
		r0 = rf(id, token, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, lahan.Core) error); ok {
		r1 = rf(id, token, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDetailLahan provides a mock function with given fields: id, role
func (_m *LahanData) SelectDetailLahan(id int, role string) (lahan.Core, error) {
	ret := _m.Called(id, role)

	var r0 lahan.Core
	if rf, ok := ret.Get(0).(func(int, string) lahan.Core); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Get(0).(lahan.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLahanClient provides a mock function with given fields: token
func (_m *LahanData) SelectLahanClient(token int) ([]lahan.Core, error) {
	ret := _m.Called(token)

	var r0 []lahan.Core
	if rf, ok := ret.Get(0).(func(int) []lahan.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lahan.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLahan_ByClientID provides a mock function with given fields: token
func (_m *LahanData) SelectLahan_ByClientID(token int) ([]lahan.LahanPenitip, error) {
	ret := _m.Called(token)

	var r0 []lahan.LahanPenitip
	if rf, ok := ret.Get(0).(func(int) []lahan.LahanPenitip); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lahan.LahanPenitip)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLahan provides a mock function with given fields: id, token, data
func (_m *LahanData) UpdateLahan(id int, token int, data lahan.Core) (int, error) {
	ret := _m.Called(id, token, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, lahan.Core) int); ok {
		r0 = rf(id, token, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, lahan.Core) error); ok {
		r1 = rf(id, token, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLahanData interface {
	mock.TestingT
	Cleanup(func())
}

// NewLahanData creates a new instance of LahanData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLahanData(t mockConstructorTestingTNewLahanData) *LahanData {
	mock := &LahanData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
