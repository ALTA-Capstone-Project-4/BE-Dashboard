// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	gudang "warehouse/features/gudang"

	mock "github.com/stretchr/testify/mock"
)

// GudangData is an autogenerated mock type for the DataInterface type
type GudangData struct {
	mock.Mock
}

// CreatGudang provides a mock function with given fields: data
func (_m *GudangData) CreatGudang(data gudang.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(gudang.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gudang.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllLahan provides a mock function with given fields: offset
func (_m *GudangData) SelectAllLahan(offset int) ([]gudang.Lahan, error) {
	ret := _m.Called(offset)

	var r0 []gudang.Lahan
	if rf, ok := ret.Get(0).(func(int) []gudang.Lahan); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gudang.Lahan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectGudangByID provides a mock function with given fields: gudang_id
func (_m *GudangData) SelectGudangByID(gudang_id int) (gudang.Core, error) {
	ret := _m.Called(gudang_id)

	var r0 gudang.Core
	if rf, ok := ret.Get(0).(func(int) gudang.Core); ok {
		r0 = rf(gudang_id)
	} else {
		r0 = ret.Get(0).(gudang.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(gudang_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGudang provides a mock function with given fields: id, data
func (_m *GudangData) UpdateGudang(id int, data gudang.Core) (int, error) {
	ret := _m.Called(id, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, gudang.Core) int); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, gudang.Core) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGudangData interface {
	mock.TestingT
	Cleanup(func())
}

// NewGudangData creates a new instance of GudangData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGudangData(t mockConstructorTestingTNewGudangData) *GudangData {
	mock := &GudangData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
